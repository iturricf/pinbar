#!/usr/bin/env php
<?php

declare(strict_types=1);

use CharlieIndia\Pinbar\Calculator\Calculator;
use CharlieIndia\Pinbar\Fee\FeeConfig;
use CharlieIndia\Pinbar\Operation\Operation;
use CharlieIndia\Pinbar\Output\ConsoleOutputManager;
use CharlieIndia\Pinbar\Transformer\OperationTransformer;
use Commando\Command;

require_once __DIR__.'/../vendor/autoload.php';

$console = new Command();
$console
    ->option()
    ->require()
    ->aka('amount')
    ->title('amount')
    ->description('El monto de dinero a operar.');

$console
    ->option()
    ->require()
    ->aka('price')
    ->title('price')
    ->description('El precio del papel a operar.');

$console
    ->option()
    ->require(false)
    ->aka('profit')
    ->title('profit')
    ->description('Utilidades esperadas en porcentaje');

$console
    ->option('q')
    ->require(false)
    ->aka('quantity')
    ->title('quantity')
    ->description('Calcula la operacion en base a cantidad de papeles en lugar de monto de dinero.')
    ->boolean();

$console
    ->option('s')
    ->require(false)
    ->aka('sell')
    ->title('sell')
    ->description('Simula una operacion de venta en lugar de compra.')
    ->boolean();

$feeConfig = new FeeConfig([
            'name' => 'IOL',
            'min_amount' => 50,
            'fee_rate' => 0.007,
            'market_fee_rate' => 0.0008,
            'tax_rate' => 0.21,
        ]);

$calc = new Calculator($feeConfig);

$opType = $console['sell'] ? Operation::TYPE_SELL : Operation::TYPE_BUY;

if ($console['sell'] || $console['quantity']) {
    try {
        $op = $calc->simulateQuantity(intval($console['amount']), floatval($console['price']), $opType);
    } catch (\DomainException $e) {
        printf("La cantidad a operar no puede ser menor a 1\n");

        return -1;
    }
} else {
    try {
        $op = $calc->simulateAmount(floatval($console['amount']), floatval($console['price']), $opType);
    } catch (\DomainException $e) {
        printf("El monto ingresado no es suficiente para cubrir al menos 1 papel en la operaciÃ³n\n");

        return -1;
    }

}

$outputManager = new ConsoleOutputManager(new OperationTransformer());
$outputManager->print($op);

if (!$console['sell']) {
    $profitRatio = $console['profit'] ?? 0;
    $sellOp = $calc->simulateBullish($op, floatval($profitRatio));

    $outputManager->print($sellOp);
}
